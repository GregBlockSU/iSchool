plot(hardwork,gpa, main=NULL)
abline(a=0, b=0.56)
# draw "error of prediction" for the point
arrows(min(hardwork),gpa[which.min(hardwork)],min(hardwork),min(hardwork)*0.56)
# pick 2 points to demonstrate predicted value of gpa, actual value of gpa, and
# prediction error
hardwork[14]
#  2.44326
gpa[14]
pre <- 0.56 * hardwork[14]
act <- gpa[14]
err <- act - pre
err
err
# draw histogram of estimated best-fitting line and each point
# note this is normally distributed, centered on 0
hist(gpa - (hardwork * 0.56), main=NULL)
# sum of errors is ~ 19, but the errors above and below the lines
# cancel each other
sum(gpa - (hardwork * 0.56))
# use squared error to eliminate +/- cancellation
calcSQERR <- function(dv, iv, slope)
{
(dv - (iv*slope))^2
}
head(calcSQERR(gpa,hardwork,0.56))
sum(calcSQERR(gpa,hardwork,0.56))
# the histogram is positive because negative values removed by squaring;
# most near zero
hist(calcSQERR(gpa,hardwork,0.56), main=NULL)
# create function to calculate the sum of squared errors for different slopes
# note that x, y are hard-coded
sumSQERR <- function(slope)
{
sum(calcSQERR(gpa, hardwork, slope))
}
sumSQERR(0.56)
# create a sequence of "possible" slopes
trySlopes <- seq(from=0, to=1, length.out=40)
# calculate sum of squared errors for each of these test slopes
sqerrList <- sapply(trySlopes, sumSQERR)
# plot each slope and its sum of squared errors
# note the parabolic shape, as a result of using squares
# sum of squared errors is at its lowest point ~ 0.60 (close to 0.56)
plot(trySlopes, sqerrList, main=NULL)
# now set up test to  use linear model
educdata <- data.frame(gpa, hardwork, basicsmarts, curiosity)
regOut <- lm(gpa ~ hardwork, data=educdata)
summary(regOut)
regOut3 <- lm(gpa ~ hardwork + basicsmarts + curiosity, data=educdata)
summary(regOut3)
plot(randomnoise,regOut3$residuals, main=NULL)
summary(residuals(regOut3))
cor(educdata)
regOutMCMC <- lmBF(gpa ~ hardwork + basicsmarts + curiosity,
data=educdata, posterior=TRUE, iterations=10000)
summary(regOutMCMC)
hist(regOutMCMC[,"hardwork"], main=NULL)
abline(v=quantile(regOutMCMC[,"hardwork"],c(0.025)), col="black")
abline(v=quantile(regOutMCMC[,"hardwork"],c(0.975)), col="black")
rsqList <- 1 - (regOutMCMC[,"sig2"] / var(gpa))
length(rsqList) 				# Confirms 10000 R-squared estimates
mean(rsqList) 				# Overall mean R-squared is 0.75
# [1] 0.7513275
hist(rsqList, main=NULL)
abline(v=quantile(rsqList,c(0.025)), col="black")
abline(v=quantile(rsqList,c(0.975)), col="black")
#install.packages("BayesFactor")
library(BayesFactor)
# Real example using state.x77 data
stateData <- data.frame(state.x77)
state.x77
# Real example using state.x77 data
stateData <- data.frame(state.x77)
# Real example using state.x77 data
stateData <- data.frame(state.x77)
stateOut <- lm(Life.Exp ~ HS.Grad + Income + Illiteracy,data=stateData)
summary(stateOut)
stateOutMCMC <- lmBF(Life.Exp ~ HS.Grad + Income + Illiteracy,data=stateData, posterior=TRUE, iterations=100000)
summary(stateOutMCMC)
rsqList <- 1 - (stateOutMCMC[,"sig2"] / var(stateData$Life.Exp))
mean(rsqList) 				# Overall mean R-squared
quantile(rsqList,c(0.025))
quantile(rsqList,c(0.975))
hist(stateData$Illiteracy) # Histogram of raw data
hist(stateOutMCMC[,"Illiteracy"]) # Posterior distribution of B weight
boxplot(as.numeric(stateOutMCMC[,"Illiteracy"])) # Posterior distribution of B weight
stateOutBF <- lmBF(Life.Exp ~ HS.Grad + Income + Illiteracy,data=stateData)
stateOutBF
# Homework 8
# Run these three functions to get a clean test of homework code
# dev.off() # Clear the graph window
cat('\014')  # Clear the console
rm(list=ls()) # Clear user objects from the environment
# install.packages("BayesFactor")
#install.packages("car")
library(BayesFactor)
library(car)
# Exercise 1
# Create a new dataframe from the mtcars dataset
myCars <- data.frame(mtcars[,1:6])
View(myCars)
# Exercise 2
# Interpret a correlation matrix of myCars
cor(myCars)
plot(myCars$wt, myCars$mpg, main="Scatterplot of Weight to MPG"
, xlab="weight (lbs 000s)", ylab="mpg", pch=21, bg="green", col="darkgreen")
plot(myCars$cyl, myCars$mpg, main="Scatterplot of Cylinders to MPG"
, xlab="cylinders", ylab="mpg",  pch=21, col="brown", bg="orange")
plot(myCars$disp, myCars$mpg, main="Scatterplot of Displacement to MPG"
, xlab="displacement (cu.in.)", ylab="mpg", pch=21, col="darkblue", bg="skyblue")
# Exercise 3
# Create a multiple linear regression model and interpret the results.
mod <- lm(mpg ~ wt + hp, myCars)
summary(mod)
# Exercise 4
# Construct a prediction equation and predict mpg with new values.
# mpg <- 37.22727 - 3.87783(wt) - 0.03177(hp)
new_mpg <- 37.22727 - 3.87783 * 6 - 0.03177 * 110
print(new_mpg)
# Exercise 5
# Generate a BayesFactor from a Bayesian lm on the same variables
mpgOut <- lmBF(mpg ~ wt + hp, data=myCars,posterior=F)
summary(mpgOut)
mpgOut2 <- lmBF(mpg ~ wt + hp, data=myCars,posterior=T, iterations=10000)
summary(mpgOut2)
vif(mod)
mod2 <- lm(mpg ~ ., myCars)
vif(mod2)
plot(cars)
source("C:/Users/gregb/OneDrive/Courses/Syracuse/Course Design/SCP/421/Labs/week-5-programming-lab-notebook.R", echo=TRUE)
---
title: "R Notebook"
plot(cars)
data(mtcars)
dev.off()
data(mtcars)
par(mfrow=c(2,2))
boxplot(mpg ~ am, data = mtcars, col = "pink", main = "Transmission", ylab=NULL, xlab="(Manual/Automatic)")
boxplot(mpg ~ cyl, data = mtcars, col = "yellow", main = "Cylinders", ylab=NULL, xlab="(number)")
boxplot(mpg ~ hp, data = mtcars, col = "blue", main = "Horsepower", ylab=NULL, xlab="(units)")
boxplot(mpg ~ gear, data = mtcars, col = "orange", main = "Gears", ylab=NULL, xlab="(count)")
mtext(~ bold("Motor Trend Cars - MPG"), side=3, col="blue", line=-1.5,outer=TRUE)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
boxplot(mpg ~ am, data = mtcars, col = "pink", main = "Transmission", ylab=NULL, xlab="(Manual/Automatic)")
boxplot(mpg ~ cyl, data = mtcars, col = "yellow", main = "Cylinders", ylab=NULL, xlab="(number)")
boxplot(mpg ~ hp, data = mtcars, col = "blue", main = "Horsepower", ylab=NULL, xlab="(units)")
boxplot(mpg ~ gear, data = mtcars, col = "orange", main = "Gears", ylab=NULL, xlab="(count)")
mtext(~ bold("Motor Trend Cars - MPG"), side=3, col="blue", line=-1.5,outer=TRUE)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
boxplot(mpg ~ am, data = mtcars, col = "pink", main = "Transmission", ylab=NULL, xlab="(Manual/Automatic)")
boxplot(mpg ~ cyl, data = mtcars, col = "yellow", main = "Cylinders", ylab=NULL, xlab="(number)")
boxplot(mpg ~ gear, data = mtcars, col = "orange", main = "Gears", ylab=NULL, xlab="(count)")
boxplot(mpg ~ hp, data = mtcars, col = "blue", main = "Horsepower", ylab=NULL, xlab="(units)")
mtext(~ bold("Motor Trend Cars - MPG"), side=3, col="blue", line=-1.5,outer=TRUE)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
boxplot(mpg ~ am, data = mtcars, col = "pink", main = "Transmission", ylab=NULL, xlab="(Manual/Automatic)")
boxplot(mpg ~ cyl, data = mtcars, col = "yellow", main = "Cylinders", ylab=NULL, xlab="(number)")
boxplot(mpg ~ gear, data = mtcars, col = "orange", main = "Gears", ylab=NULL, xlab="(count)")
boxplot(mpg ~ hp, data = mtcars, col = "blue", main = "Horsepower", ylab=NULL, xlab="(units)")
mtext(~ bold("Motor Trend Cars - MPG"), side=3, col="blue", line=-1.5,outer=TRUE)
par(mfrow=c(1,1))
library(ggplot2)
ggplot(iris, aes(Sepal.Length, fill = Species)) +
geom_histogram(bins = 20) +
scale_fill_viridis_d() +
facet_wrap(~ Species)
IrisPlot <- ggplot(iris, aes(Sepal.Length, Petal.Length, colour=Species)) +
geom_point() +
theme(legend.title = element_text(color = "blue", size = 10, face = "bold")) +
geom_point(color="firebrick") +
theme(plot.background = element_rect(fill = 'pink'))
print(IrisPlot)
ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(fill = Species))
ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(color=Species)) +
facet_wrap(~Species)
par(mfrow=c(2,2))
boxplot(mpg ~ am, data = mtcars, col = "pink", main = "Transmission", ylab=NULL, xlab="(Manual/Automatic)")
boxplot(mpg ~ cyl, data = mtcars, col = "yellow", main = "Cylinders", ylab=NULL, xlab="(number)")
boxplot(mpg ~ gear, data = mtcars, col = "orange", main = "Gears", ylab=NULL, xlab="(count)")
boxplot(mpg ~ hp, data = mtcars, col = "blue", main = "Horsepower", ylab=NULL, xlab="(units)")
mtext(~ bold("Motor Trend Cars - MPG"), side=3, col="blue", line=-1.5,outer=TRUE)
par(mfrow=c(1,1))
library(ggplot2)
ggplot(iris, aes(Sepal.Length, fill = Species)) +
geom_histogram(bins = 20) +
scale_fill_viridis_d() +
facet_wrap(~ Species)
ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(fill = Species))
ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(color=Species)) +
facet_wrap(~Species)
par(mfrow=c(2,2))
ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(fill = Species))
ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(color=Species)) +
facet_wrap(~Species)
install.packages("ggpubr")
#install.packages("ggpubr")
library(ggpubr)
p1 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(fill = Species))
p2 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(color=Species)) +
facet_wrap(~Species)
ggarrange(p1, p2, ncol = 2, nrow = 1)
#install.packages("ggpubr")
library(ggpubr)
p1 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(fill = Species))
p2 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(color=Species)) +
facet_wrap(~Species)
ggarrange(p1, p2, ncol = 2, nrow = 1, labels = c('Combined', 'Faceted'))
#install.packages("ggpubr")
library(ggpubr)
p1 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(fill = Species))
p2 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(color=Species)) +
facet_wrap(~Species)
ggarrange(p1, p2, ncol = 2, nrow = 2, labels = c('Combined', 'Faceted'))
#install.packages("ggpubr")
library(ggpubr)
p1 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(fill = Species))
p2 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(color=Species)) +
facet_wrap(~Species)
ggarrange(p1, p2, ncol = 2, nrow = 1, labels = c('Combined', 'Faceted'),
vjust=3)
#install.packages("ggpubr")
library(ggpubr)
p1 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(fill = Species))
p2 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(color=Species)) +
facet_wrap(~Species)
ggarrange(p1, p2, ncol = 2, nrow = 1, labels = c('Combined', 'Faceted'),
vjust=10)
#install.packages("ggpubr")
library(ggpubr)
p1 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(fill = Species))
p2 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(color=Species)) +
facet_wrap(~Species)
ggarrange(p1, p2, ncol = 2, nrow = 1, labels = c('Combined', 'Faceted'),
vjust=30)
#install.packages("ggpubr")
library(ggpubr)
p1 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(fill = Species))
p2 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(color=Species)) +
facet_wrap(~Species)
ggarrange(p1, p2, ncol = 2, nrow = 1, labels = c('Combined', 'Faceted'),
vjust=27)
#install.packages("ggpubr")
library(ggpubr)
p1 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(fill = Species))
p2 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(color=Species)) +
facet_wrap(~Species)
ggarrange(p1, p2, ncol = 2, nrow = 1, labels = c('Combined', 'Faceted'),
hjust=-1)
#install.packages("ggpubr")
library(ggpubr)
p1 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(fill = Species))
p2 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(color=Species)) +
facet_wrap(~Species)
ggarrange(p1, p2, ncol = 2, nrow = 1, labels = c('Combined', 'Faceted'),
hjust=1)
#install.packages("ggpubr")
library(ggpubr)
p1 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(fill = Species))
p2 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(color=Species)) +
facet_wrap(~Species)
ggarrange(p1, p2, ncol = 2, nrow = 1, labels = c('Combined', 'Faceted'),
hjust=.4)
#install.packages("ggpubr")
library(ggpubr)
p1 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(fill = Species))
p2 <- ggplot(iris, aes(x = Sepal.Length)) +
labs(title="asdf") +
geom_density(aes(color=Species)) +
facet_wrap(~Species)
ggarrange(p1, p2, ncol = 2, nrow = 1, labels = c('Combined', 'Faceted'),
hjust=.4)
#install.packages("ggpubr")
library(ggpubr)
p1 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(fill = Species))+
labs(title="Combined")
p2 <- ggplot(iris, aes(x = Sepal.Length)) +
labs(title="Faceted") +
geom_density(aes(color=Species)) +
facet_wrap(~Species)
ggarrange(p1, p2, ncol = 2, nrow = 1)
ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(fill = Species))+
labs(title="Combined")
ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(color=Species)) +
labs(title="Faceted") +
facet_wrap(~Species)
#install.packages("ggpubr")
library(ggpubr)
p1 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(fill = Species))+
labs(title="Combined")
p2 <- ggplot(iris, aes(x = Sepal.Length)) +
labs(title="Faceted") +
geom_density(aes(color=Species)) +
facet_wrap(~Species)
ggarrange(p1, p2, ncol = 2, nrow = 1)
?mtcars
?cars
par(mfrow=c(2,2))
boxplot(mpg ~ am, data = mtcars, col = "pink", main = "Transmission", ylab=NULL, xlab="(Manual/Automatic)")
boxplot(mpg ~ cyl, data = mtcars, col = "yellow", main = "Cylinders", ylab=NULL, xlab="(cylinder count)")
boxplot(mpg ~ gear, data = mtcars, col = "orange", main = "Gears", ylab=NULL, xlab="(gear count)")
boxplot(mpg ~ hp, data = mtcars, col = "blue", main = "Horsepower", ylab=NULL, xlab="(foot-pounds-per-second)")
mtext(~ bold("Motor Trend Cars - MPG"), side=3, col="blue", line=-1.5,outer=TRUE)
par(mfrow=c(1,1))
#install.packages("ggpubr")
library(ggpubr)
p1 <- ggplot(iris, aes(x = Sepal.Length)) +
geom_density(aes(fill = Species))+
labs(title="Combined")
p2 <- ggplot(iris, aes(x = Sepal.Length)) +
labs(title="Faceted") +
geom_density(aes(color=Species)) +
facet_wrap(~Species)
ggarrange(p1, p2, ncol = 2, nrow = 1)
plot(mtcars)
library(ggplot2)
ggplot(diamonds, aes(x = cut, y = price, fill = cut)) +
geom_boxplot(outlier.colour="black", outlier.shape=16, outlier.size=2)
library(ggplot2)
ggplot(diamonds, aes(x = cut, y = price, fill = cut)) +
geom_boxplot(outlier.colour="red", outlier.shape=16, outlier.size=1.5)+
labs(title="Diamond price distribution by cut")
library(ggplot2)
ggplot(diamonds, aes(x = cut, y = price, fill = cut)) +
geom_boxplot(outlier.colour="red", outlier.shape=14, outlier.size=1.2)+
labs(title="Diamond price distribution by cut")
library(ggplot2)
ggplot(diamonds, aes(x = cut, y = price, fill = cut)) +
geom_boxplot(outlier.colour="red", outlier.shape=15, outlier.size=1.2)+
labs(title="Diamond price distribution by cut")
library(ggplot2)
ggplot(diamonds, aes(x = cut, y = price, fill = cut)) +
geom_boxplot(outlier.colour="red", outlier.shape=16, outlier.size=1.2)+
labs(title="Diamond price distribution by cut")
summary(BOD)
rainfall <- c(0,0,0,2,1,1,4)  # Amount of rain each day this week
sum(rainfall) / length(rainfall)  # Compute the mean the hard way
mean(rainfall) # Use a function to compute the mean
# Only if you did not do this in the Introduction
install.packages("modeest")  # Download the mode estimation package
library(modeest) # Make the package ready to use
mfv(rainfall) # mfv stands for most frequent value
votes <- c(200,300,400) # Here is scenario one
(votes - mean(votes)) ^ 2 # Show a list of squared deviations
sum( (votes - mean(votes)) ^ 2) # Add them together
sum( (votes - mean(votes)) ^ 2) / length(votes) # Divide by the number of observations
votes1 <- c(200,300,400) # Here is scenario one again
sqrt( sum((votes1 - mean(votes1))^2) / length(votes1) ) # That is the standard deviation
votes2 <- c(299,300,301) # Here is scenario two
sqrt( sum((votes2 - mean(votes2))^2) / length(votes2) ) # And the same for candidate 2
# The commented code makes a high res plot when run in R
#png("Figure01_1.png", width = 6, height = 6, units = 'in', res = 300)
hist( rnorm(n=1000, mean=100, sd=10), main=NULL )
# The commented code makes a high res plot when run in R
#png("Figure01_1.png", width = 6, height = 6, units = 'in', res = 300)
hist( rnorm(n=1000, mean=100, sd=10), main=NULL )
rainfall <- c(0,0,0,2,1,1,4) 		# Amount of rain each day this week
rainfall <- c(0,0,0,2,1,1,4) 		# Amount of rain each day this week
rainfall
rainfall <- c(0,0,0,2,1,1,4) 		# Amount of rain each day this week
rainfall
#install.packages("modeest")
library("modeest")
sum(rainfall)
length(rainfall)
rainfall_mean <- sum(rainfall) / length(rainfall) 	# Compute the mean the hard way
mean(rainfall)
# Only if you did not do this in the Introduction
#install.packages("modeest") 	# Download the mode estimation package
#library(modeest)			# Make the package ready to use
mfv(rainfall)				# mfv stands for most frequent value
# Only if you did not do this in the Introduction
#install.packages("modeest") 	# Download the mode estimation package
#library(modeest)			# Make the package ready to use
Mfv(rainfall)				# mfv stands for most frequent value
# Only if you did not do this in the Introduction
#install.packages("modeest") 	# Download the mode estimation package
#library(modeest)			# Make the package ready to use
mfv(Rainfall)				# mfv stands for most frequent value
Rainfall <- 0
mfv(Rainfall)
source("C:/Users/gregb/OneDrive/Courses/Syracuse/Courses/772/Weeks/01/textbook-week-1.R", echo=TRUE)
source("C:/Users/gregb/OneDrive/Courses/Syracuse/Courses/772/Weeks/01/textbook-week-1.R", echo=TRUE)
rainfall <= c(0,0,0,2,1,1,4) 		# Amount of rain each day this week
data()
summary(InsectSprays)
#'**Exercise 4**
#'
#'As in the previous exercise, use the data() function to get a list of the data sets that are
#'included with the basic installation of R. Choose a data set that includes just one variable,
#'for example, the LakeHuron data set (levels of Lake Huron in the years 1875 through 1972).
#'Use the hist() command to create a histogram of the variable—for exaple, hist(LakeHuron). Describe the shape of the histogram in words. Which of the distribution types do you think these data fit most closely (e.g., normal, Poisson). Speculate on why your selected data may fit that distribution.
#'
#'Histogram of Nile dataset
hist(Nile)
m <- .75
m
# a few more simple statements
x <- 10
b <- 7
y <- m * x + b
y
# displays the value '5' in the console window
sqrt(25)
z <- sqrt(y)
z
# note that a function name is followed by open & closing parenthesis; within
# the parantheses you can provide the input parameters to the function
f
myList <- c(21, 12, 17, 14)
myList
pie(myList)
barplot(myList)
? barplot
# note that the parameters main, ylab and xlab are specified by name, using
# the notation name = value; whereas the variable myList is passed by position
barplot(myList, main = 'Tortoise burrows', ylab = 'Feet', xlab = 'Tortoise')
# we can also change the orientation to horizontal using the horiz parameter
barplot(myList, main = 'Tortoise burrows', ylab = 'Feet', xlab = 'Tortoise',
horiz = TRUE,
names.arg = c('Felix', 'OddOne', 'Scamper', 'Blue'))
# let's use the c() function to create a list of colors
myColors <- c('green', 'red', 'purple', 'blue')
barplot(myList, main = 'Tortoise burrows', ylab = 'Feet', xlab = 'Tortoise',
horiz = TRUE,
col = myColors,
names.arg = c('Felix', 'OddOne', 'Scamper', 'Blue'))
# the dev.off() command clears the current plot
dev.off()
# graphics.off() clears all plots
graphics.off()
# for help on rnorm(), typpe "? rnorm"
? rnorm
# use set.seed to generate repeatable results
set.seed(123)
x <- rnorm(5000)
y <- x + rnorm(5000)
# inspect the two variables
summary(x)
summary(y)
# let's plot the two variables using a histogram
hist(x, main = 'The x distribution')
hist(y, main = 'The y distribution')
plot(x, y)
? par
par(mfrow = c(1, 3))
hist(x, main = 'The x distribution')
hist(y, main = 'The y distribution')
plot(x, y)
par(mfrow = c(3, 1))
hist(x, main = 'The x distribution')
hist(y, main = 'The y distribution')
plot(x, y)
shiny::runApp('C:/repos/SU/iSchool/CSP/421/Labses/week-6/r-shiny/census-app')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
#install.packages('rsconnect')
#install.packages(c("maps", "mapproj"))
onstall.packages(c("htmltools"))
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
#install.packages('rsconnect')
#install.packages(c("maps", "mapproj"))
install.packages(c("htmltools"))
shiny::runApp('C:/repos/SU/iSchool/CSP/421/Labses/week-6/r-shiny/census-app')
shiny::runApp('C:/repos/SU/iSchool/CSP/421/Labses/week-6/r-shiny/census-app')
