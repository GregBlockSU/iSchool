install.packages("odbc")
#install.packages("odbc")
library(odbc)
# Create a connection to SQL Server using ODBC
# NOTE: Be sure to change the database to your actual database
myconn <- DBI::dbConnect(odbc::odbc(),
Driver             = "SQL Server Native Client 11.0",
Server             = ".",
Database           = "IST659",
Trusted_Connection = "Yes"
)
View(myconn)
myconn
# Ready the SQL to send to the Server
sqlSelectStatement <-
"SELECT
vc_VidCast.vc_VidCastID
, vc_VidCast.VidCastTitle
, DATEPART(dw, StartDateTime) as StartDayOfWeek
, DATEDIFF(n, StartDateTime, EndDateTime) as ActualDuration
, ScheduleDurationMinutes
, vc_User.vc_UserID
, vc_User.UserName
FROM vc_VidCast
JOIN vc_User ON vc_User.vc_UserID = vc_VidCast.vc_UserID
"
sqlResult <- dbGetQuery(myconn, sqlSelectStatement)
sqlResult
# Use +/- 3 sigma to prune outliers (Symmetrically distributed)
sqlResult <- subset(sqlResult, ActualDuration > 0)
sigma <- sd(sqlResult$ActualDuration)
mu <- mean(sqlResult$ActualDuration)
upper <- mu + (3*sigma)
lower <- mu - (3*sigma)
sqlResult <- subset(sqlResult, ActualDuration < upper)
sqlResult <- subset(sqlResult, ActualDuration > lower)
# Create a list of days of the week for charting later
days <- c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat")
# Create a histogram of durations (appears in the Plots tab)
hist(sqlResult$ActualDuration,
main="How long are the VidCasts?",
xlab="Minutes",
ylab="VidCasts",
border="blue",
col="grey",
labels=TRUE
)
# Plot a bar chart of video counts by day of the week
dayCounts <- table(sqlResult$StartDayOfWeek)
barplot(dayCounts,
main="VidCasts by Day of Week",
ylab="Day of Week",
xlab="Count of VidCasts",
names.arg = days
)
DBI::dbDisconnect(myconn)
#install.packages("odbc")
library(odbc)
# Create a connection to SQL Server using ODBC
# NOTE: Be sure to change the database to your actual database
myconn <- DBI::dbConnect(odbc::odbc(),
Driver             = "SQL Server Native Client 11.0",
Server             = ".",
Database           = "IST659",
Trusted_Connection = "Yes"
)
myconn
# Ready the SQL to send to the Server
sqlSelectStatement <-
"SELECT
vc_VidCast.vc_VidCastID
, vc_VidCast.VidCastTitle
, DATEPART(dw, StartDateTime) as StartDayOfWeek
, DATEDIFF(n, StartDateTime, EndDateTime) as ActualDuration
, ScheduleDurationMinutes
, vc_User.vc_UserID
, vc_User.UserName
FROM vc_VidCast
JOIN vc_User ON vc_User.vc_UserID = vc_VidCast.vc_UserID
"
sqlResult <- dbGetQuery(myconn, sqlSelectStatement)
sqlResult
install.packages("odbc")
install.packages("odbc")
#install.packages("odbc")
library(odbc)
# Create a connection to SQL Server using ODBC
# NOTE: Be sure to change the database to your actual database
myconn <- DBI::dbConnect(odbc::odbc(),
Driver             = "SQL Server Native Client 11.0",
Server             = ".",
Database           = "IST659",
Trusted_Connection = "Yes"
)
# Create a connection to SQL Server using ODBC
# NOTE: Be sure to change the database to your actual database
myconn <- DBI::dbConnect(odbc::odbc(),
Driver             = "SQL Server Native Client 11.0",
Server             = ".",
Database           = "IST6   59",
Trusted_Connection = "Yes"
)
myconn
# Create a connection to SQL Server using ODBC
# NOTE: Be sure to change the database to your actual database
myconn <- DBI::dbConnect(odbc::odbc(),
Driver             = "SQL Server Native Client 11.0",
Server             = ".",
Database           = "IST659",
Trusted_Connection = "Yes"
)
myconn
# Ready the SQL to send to the Server
sqlSelectStatement <-
"SELECT
vc_VidCast.vc_VidCastID
, vc_VidCast.VidCastTitle
, DATEPART(dw, StartDateTime) as StartDayOfWeek
, DATEDIFF(n, StartDateTime, EndDateTime) as ActualDuration
, ScheduleDurationMinutes
, vc_User.vc_UserID
, vc_User.UserName
FROM vc_VidCast
JOIN vc_User ON vc_User.vc_UserID = vc_VidCast.vc_UserID
"
sqlResult <- dbGetQuery(myconn, sqlSelectStatement)
sqlResult
# Use +/- 3 sigma to prune outliers (Symmetrically distributed)
sqlResult <- subset(sqlResult, ActualDuration > 0)
sigma <- sd(sqlResult$ActualDuration)
mu <- mean(sqlResult$ActualDuration)
upper <- mu + (3*sigma)
lower <- mu - (3*sigma)
sqlResult <- subset(sqlResult, ActualDuration < upper)
sqlResult <- subset(sqlResult, ActualDuration > lower)
# Create a list of days of the week for charting later
days <- c("Sun", "Mon", "Tues", "Weds", "Thurs", "Fri", "Sat")
# Create a histogram of durations (appears in the Plots tab)
hist(sqlResult$ActualDuration,
main="How long are the VidCasts?",
xlab="Minutes",
ylab="VidCasts",
border="blue",
col="grey",
labels=TRUE
)
# Plot a bar chart of video counts by day of the week
dayCounts <- table(sqlResult$StartDayOfWeek)
barplot(dayCounts,
main="VidCasts by Day of Week",
ylab="Day of Week",
xlab="Count of VidCasts",
names.arg = days
)
DBI::dbDisconnect(myconn)
#####################################
# Chapter 1
data()
summary(BOD)
rainfall <- c(0,0,0,2,1,1,4)  # Amount of rain each day this week
sum(rainfall) / length(rainfall)  # Compute the mean the hard way
mean(rainfall) # Use a function to compute the mean
# Only if you did not do this in the Introduction
install.packages("modeest")  # Download the mode estimation package
library(modeest) # Make the package ready to use
mfv(rainfall) # mfv stands for most frequent value
votes <- c(200,300,400) # Here is scenario one
(votes - mean(votes)) ^ 2 # Show a list of squared deviations
sum( (votes - mean(votes)) ^ 2) # Add them together
sum( (votes - mean(votes)) ^ 2) / length(votes) # Divide by the number of observations
votes1 <- c(200,300,400) # Here is scenario one again
sqrt( sum((votes1 - mean(votes1))^2) / length(votes1) ) # That is the standard deviation
votes2 <- c(299,300,301) # Here is scenario two
sqrt( sum((votes2 - mean(votes2))^2) / length(votes2) ) # And the same for candidate 2
# The commented code makes a high res plot when run in R
#png("Figure01_1.png", width = 6, height = 6, units = 'in', res = 300)
hist( rnorm(n=1000, mean=100, sd=10), main=NULL )
# This shows a finer-grained histogram with 100 categories or âbreaksâ
# Try increasing the n and the breaks to see what happens
hist( rnorm(n=10000, mean=100, sd=10), breaks=100 )
#png("Figure01_2.png", width = 6, height = 6, units = 'in', res = 300)
hist(rpois(n=1000, lambda=1), main=NULL)
mean(rpois(n=1000, lambda=1))
myPoiSample <- rpois(n=1000, lambda=1)
mean(myPoiSample)
hist(myPoiSample)
table(rbinom(n=100,size=6,prob=0.5))
hist(rbinom(n=100,size=6,prob=0.5))
#png("Figure02_1.png", width = 6, height = 6, units = 'in', res = 300)
hist(rbinom(n=1000,size=6,prob=0.5), main=NULL)
#png("Figure02_2.png", width = 6, height = 6, units = 'in', res = 300)
barplot(table(rbinom(n=1000,size=6,prob=0.5)), main=NULL)
table(rbinom(n=1000,size=6,prob=0.5))/1000
#png("Figure02_3.png", width = 6, height = 6, units = 'in', res = 300)
barplot(table(rbinom(n=1000,size=6,prob=0.5))/1000, main=NULL)
probTable <- table(rbinom(n=1000,size=6,prob=0.5))/1000
probTable
cumsum(probTable)
probTable <- table(rbinom(n=1000,size=6,prob=0.5))/1000
#png("Figure02_4.png", width = 6, height = 6, units = 'in', res = 300)
barplot(cumsum(probTable),main=NULL)
probTable <- table(rbinom(n=10000,size=100,prob=0.5))/10000
barplot(probTable)
barplot(cumsum(probTable))
# Sidebar 2.1: Create Your Own Tables with R
#
toast <- matrix(c(2,1,3,4),ncol=2,byrow=TRUE) # Create a two column structure using the matrix() command
colnames(toast) <- c("Down","Up") # Label the columns
rownames(toast) <- c("Jelly","Butter") # Label the rows
toast <- as.table(toast) # Convert from metric to table
toast # Show the table on the console
margin.table(toast) # This is the grand total of toast drops
margin.table(toast,1) # These are the marginal totals for rows
margin.table(toast,2) # These are the marginal totals for columns
toastProbs <- toast/margin.table(toast) # Calculate probabilities
toastProbs # Report probabilities to console
help(cumsum)
library(tidyverse)
install.packages("tidyverse")
install.packages("caret")
library(tidyverse)
library(forcats)
library(ggplot2)
library(dplyr)
library(stargazer)
install.packages("stargazer")
library(caret)
library(modelr)
setwd("C:/Users/gregb/OneDrive/git/iSchool/ist707/Homework/02")
# setwd("C:/Users/HQRGRS27/source/git/SU/iSchool/ist707/Homework/01")
storyteller<- read_csv("data-storyteller.csv", na = c(""))
#checking data types to see what may need changing
str(storyteller)
storyteller$School<-factor(storyteller$School)
#The section column is of the Numeric type and should be be a factor instead
storyteller$Section<-factor(storyteller$Section)
#Each of the remaining columns is a discrete count of the students in each category.
#As it is not continuous the columns 'Very Ahead', 'Middling', 'Behind', 'More behind', 'Very behind'
#and 'Completed' should all be integers.
storyteller$`Very Ahead +5`<-as.integer(storyteller$`Very Ahead +5`)
storyteller$`Middling +0`<-as.integer(storyteller$`Middling +0`)
storyteller$`Behind -1-5`<-as.integer(storyteller$`Behind -1-5`)
storyteller$`More Behind -6-10`<-as.integer(storyteller$`More Behind -6-10`)
storyteller$`Very Behind -11`<-as.integer(storyteller$`Very Behind -11`)
storyteller$Completed<-as.integer(storyteller$Completed)
storytellerTemp<-storyteller[,c(2,1,8,3,4,5,6,7)]
storyteller<-storytellerTemp
#displaying top 5 rows
head(storyteller)
## Missing Data
#Checking for any NA values
sum(is.na(storyteller))
#The dataset is cleaned
head(storyteller)
# Creating a bar chart to show the number of sections from each school
SchoolValues<-c(length(which(storyteller$School=='A')), length(which(storyteller$School=='B')), length(which(storyteller$School=='C')), length(which(storyteller$School=='D')), length(which(storyteller$School=='E')))
barplot(SchoolValues, names.arg = c('A', 'B', 'C', 'D', 'E'), main='Number of sections Per School')
barplot(storyteller$Completed, main='#completed students / section', names.arg = c(1:30))
summary(storyteller$Completed)
barplot(storyteller$`Very Ahead +5`, main='number of very ahead students per section', names.arg = c(1:30))
summary(storyteller$`Very Ahead +5`)
barplot(storyteller$`Middling +0`, main='number of Middling students per section', names.arg = c(1:30))
summary(storyteller$`Middling +0`)
barplot(storyteller$`Behind -1-5`, main='number of Behind students per section', names.arg = c(1:30))
summary(storyteller$`Behind -1-5`)
barplot(storyteller$`More Behind -6-10`, main='number of More Behind students per section', names.arg = c(1:30))
summary(storyteller$`More Behind -6-10`)
barplot(storyteller$`Very Behind -11`, main='number of Very Behind students per section', names.arg = c(1:30))
summary(storyteller$`Very Behind -11`)
#determining the number of students in each category
StudentSums<-colSums(storyteller[,3:8])
sum(StudentSums)
#determining the amount of students in each section
SectionSums<-rowSums(storyteller[,3:8])
data.frame(SectionSums)
#Creating a barplot to show distribution
StudentSums<-colSums(storyteller[,3:8])
barplot(StudentSums, main="Student totals across all categories")
StudentSums/sum(StudentSums)
StudentSums/sum(StudentSums)
plot(storyteller$Completed, storyteller$`Middling +0`)
storytellerA<-storyteller[which(storyteller$School == "A"),]
storytellerB<-storyteller[which(storyteller$School == "B"),]
storytellerC<-storyteller[which(storyteller$School == "C"),]
storytellerD<-storyteller[which(storyteller$School == "D"),]
storytellerE<-storyteller[which(storyteller$School == "E"),]
StudentSumsA<-colSums(storytellerA[3:8])
StudentSumsA
barplot(StudentSumsA, main = "School A")
StudentSumsB<-colSums(storytellerB[3:8])
StudentSumsB
barplot(StudentSumsB, main = "School B")
StudentSumsC<-colSums(storytellerC[3:8])
StudentSumsC
barplot(StudentSumsC, main = "School C")
StudentSumsD<-colSums(storytellerD[3:8])
StudentSumsD
barplot(StudentSumsD, main = "School D")
StudentSumsE<-colSums(storytellerE[3:8])
StudentSumsE
barplot(StudentSumsE, main = "School E")
sum(StudentSumsB)/sum(StudentSums)
sum(StudentSumsD)/sum(StudentSums)
barplot(storytellerB$Completed, names.arg =c(1:12),ylim=c(0,30), main = "Students Completed by Section")
rowSums(storytellerB[,3:8])
barplot(storytellerB$`Behind -1-5`+storytellerB$`More Behind -6-10`+storytellerB$`Very Behind -11`, names.arg =c(1:12), ylim=c(0,30), main = "Students Behind by Section")
setwd("C:/Users/gregb/OneDrive/git/iSchool/ist707/Homework/02")
library(base64enc)
install.packages("base64")
# install.packages("caret")
# install.packages("tidyverse")
# install.packages("stargazer")
library(tidyverse)
library(forcats)
library(ggplot2)
library(dplyr)
library(stargazer)
library(caret)
library(modelr)
library(x)
help(read_csv
)
# setwd("C:/Users/HQRGRS27/source/git/SU/iSchool/ist707/Homework/01")
storyteller<- read_csv("data-storyteller.csv", na = c(""))
View(storyteller)
#checking data types to see what may need changing
str(storyteller)
storyteller$School<-factor(storyteller$School)
#The section column is of the Numeric type and should be be a factor instead
storyteller$Section<-factor(storyteller$Section)
#checking data types to see what may need changing
str(storyteller)
#Each of the remaining columns is a discrete count of the students in each category.
#As it is not continuous the columns 'Very Ahead', 'Middling', 'Behind', 'More behind', 'Very behind'
#and 'Completed' should all be integers.
storyteller$`Very Ahead +5`<-as.integer(storyteller$`Very Ahead +5`)
storyteller$`Middling +0`<-as.integer(storyteller$`Middling +0`)
storyteller$`Behind -1-5`<-as.integer(storyteller$`Behind -1-5`)
storyteller$`More Behind -6-10`<-as.integer(storyteller$`More Behind -6-10`)
storyteller$`Very Behind -11`<-as.integer(storyteller$`Very Behind -11`)
storyteller$Completed<-as.integer(storyteller$Completed)
#checking data types to see what may need changing
str(storyteller)
storytellerTemp<-storyteller[,c(2,1,8,3,4,5,6,7)]
storyteller<-storytellerTemp
#displaying top 5 rows
head(storyteller)
## Missing Data
#Checking for any NA values
sum(is.na(storyteller))
#The dataset is cleaned
head(storyteller)
# Creating a bar chart to show the number of sections from each school
SchoolValues<-c(length(which(storyteller$School=='A')), length(which(storyteller$School=='B')), length(which(storyteller$School=='C')), length(which(storyteller$School=='D')), length(which(storyteller$School=='E')))
barplot(SchoolValues, names.arg = c('A', 'B', 'C', 'D', 'E'), main='Number of sections Per School')
barplot(SchoolValues, names.arg = c('A', 'B', 'C', 'D', 'E'), main='Number of sections Per School')
barplot(storyteller$Completed, main='#completed students / section', names.arg = c(1:30))
summary(storyteller$Completed)
barplot(storyteller$`Very Ahead +5`, main='number of very ahead students per section', names.arg = c(1:30))
summary(storyteller$`Very Ahead +5`)
barplot(storyteller$`Middling +0`, main='number of Middling students per section', names.arg = c(1:30))
summary(storyteller$`Middling +0`)
barplot(storyteller$`Behind -1-5`, main='number of Behind students per section', names.arg = c(1:30))
summary(storyteller$`Behind -1-5`)
barplot(storyteller$`More Behind -6-10`, main='number of More Behind students per section', names.arg = c(1:30))
summary(storyteller$`More Behind -6-10`)
barplot(storyteller$`Very Behind -11`, main='number of Very Behind students per section', names.arg = c(1:30))
summary(storyteller$`Very Behind -11`)
#determining the number of students in each category
StudentSums<-colSums(storyteller[,3:8])
sum(StudentSums)
#determining the amount of students in each section
SectionSums<-rowSums(storyteller[,3:8])
data.frame(SectionSums)
#Creating a barplot to show distribution
StudentSums<-colSums(storyteller[,3:8])
barplot(StudentSums, main="Student totals across all categories")
StudentSums/sum(StudentSums)
plot(storyteller$Completed, storyteller$`Middling +0`)
storytellerA<-storyteller[which(storyteller$School == "A"),]
storytellerB<-storyteller[which(storyteller$School == "B"),]
storytellerC<-storyteller[which(storyteller$School == "C"),]
storytellerD<-storyteller[which(storyteller$School == "D"),]
storytellerE<-storyteller[which(storyteller$School == "E"),]
StudentSumsA<-colSums(storytellerA[3:8])
StudentSumsA
barplot(StudentSumsA, main = "School A")
StudentSumsB<-colSums(storytellerB[3:8])
StudentSumsB
barplot(StudentSumsB, main = "School B")
StudentSumsC<-colSums(storytellerC[3:8])
StudentSumsC
barplot(StudentSumsC, main = "School C")
StudentSumsD<-colSums(storytellerD[3:8])
StudentSumsD
barplot(StudentSumsD, main = "School D")
StudentSumsE<-colSums(storytellerE[3:8])
StudentSumsE
barplot(StudentSumsE, main = "School E")
help(rbinom)
table(rbinom(n=100,size=6,prob=0.5))
hist(rbinom(n=100,size=6,prob=0.5))
#png("Figure02_1.png", width = 6, height = 6,help units = 'in', res = 300)
hist(rbinom(n=1000,size=6,prob=0.5), main=NULL)
#png("Figure02_1.png", width = 6, height = 6,help units = 'in', res = 300)
hist(rbinom(n=10000,size=6,prob=0.5), main=NULL)
#png("Figure02_1.png", width = 6, height = 6,help units = 'in', res = 300)
hist(rbinom(n=100000,size=6,prob=0.5), main=NULL)
#png("Figure02_2.png", width = 6, height = 6, units = 'in', res = 300)
barplot(table(rbinom(n=1000,size=6,prob=0.5)), main=NULL)
table(rbinom(n=1000,size=6,prob=0.5))/1000
#png("Figure02_3.png", width = 6, height = 6, units = 'in', res = 300)
barplot(table(rbinom(n=1000,size=6,prob=0.5))/1000, main=NULL)
#png("Figure02_3.png", width = 6, height = 6, units = 'in', res = 300)
barplot(table(rbinom(n=1000,size=6,prob=0.5))/1000, main=NULL)
#png("Figure02_3.png", width = 6, height = 6, units = 'in', res = 300)
barplot(table(rbinom(n=1000,size=6,prob=0.5))/1000, main=NULL)
rbinom(n=100,size=6,prob=0.5)
a <-  7
a
setwd("C:/Users/gregb/OneDrive/git/iSchool/ist772/Homework/02")
#png("Figure02_3.png", width = 6, height = 6, units = 'in', res = 300)
barplot(table(rbinom(n=1000,size=6,prob=0.5))/1000, main=NULL)
#png("Figure02_3.png", width = 6, height = 6, units = 'in', res = 300)
barplot(table(rbinom(n=1000,size=6,prob=0.5))/1000, main=NULL)
#png("Figure02_3.png", width = 6, height = 6, units = 'in', res = 300)
barplot(table(rbinom(n=1000,size=6,prob=0.5))/1000, main=NULL)
probTable <- table(rbinom(n=1000,size=6,prob=0.5))/1000
probTable
help(cumsum)
cumsum(probTable)
probTable <- table(rbinom(n=1000,size=6,prob=0.5))/1000
#png("Figure02_4.png", width = 6, height = 6, units = 'in', res = 300)
barplot(cumsum(probTable),main=NULL)
probTable <- table(rbinom(n=10000,size=100,prob=0.5))/10000
barplot(probTable)
barplot(cumsum(probTable))
c(2,1,3,4)
# Sidebar 2.1: Create Your Own Tables with R
#
toast <- matrix(c(2,1,3,4),ncol=2,byrow=TRUE) # Create a two column structure using the matrix() command
View(toast)
colnames(toast) <- c("Down","Up") # Label the columns
rownames(toast) <- c("Jelly","Butter") # Label the rows
View(toast)
toast <- as.table(toast) # Convert from metric to table
toast # Show the table on the console
margin.table(toast) # This is the grand total of toast drops
margin.table(toast,1) # These are the marginal totals for rows
margin.table(toast,2) # These are the marginal totals for columns
toastProbs <- toast/margin.table(toast) # Calculate probabilities
toastProbs # Report probabilities to console
