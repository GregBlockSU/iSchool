hist(rbinom(100000,100,.5), main="What Distribution?", xlab = "X")
lapply(0:7, function(i) choose(i, 0:i)) # Pascal's triangle out to 7 coins
sum(choose(7, 0:7)) # Total trials for the bottom row
length(choose(7, 0:7)) - 1 # Number of coins
choose(7, 0:7)/128 # Probabilities for entries in the bottom row
rbinom(10,7,.5) # 10 throws of seven coins
table(rbinom(100000,7,.5)) # 100,000 throws, summarized in a table
table(rbinom(100000,7,.5))/100000 # Same expressed as proportions
dbinom(x=0:7, size=7, prob=0.5) # Density function
# Bonus: Calculate how much error between 100,000 and theory
(table(rbinom(1000000,7,.5))/1000000) - dbinom(x=0:7, size=7, prob=0.5)
# Set up the matrix
accMatrix <- matrix(data=c(0,6,4,6,0,6,6,4,5,4,9,0),
nrow=4,byrow=T,
dimnames=list(c("Vehicle","Spill","Equipment","Injury"),
c("Factory 1", "Factory 2", "Factory 3")))
rowSums(accMatrix) # Demonstrate rowSums()
accPropMatrix <- accMatrix/sum(accMatrix) # Proportions for each cell
accPropMatrix # Echo to console
as.matrix(accPropMatrix[which.max(accPropMatrix)]) # What's the largest proportion?
rowSums(accPropMatrix) # Calculate row and col sums from proportions
colSums(accPropMatrix)
#############################
# First analyze by column
which.max(colSums(accPropMatrix)) # Factory 2 has the most
# Normalized likelihood of all accidents, factory 2
accMatrix[,2]/sum(accMatrix[,2])
# Same thing, but using the prop matrix
accPropMatrix[,2]/sum(accPropMatrix[,2])
# Vehicle accidents are the first element
(accMatrix[,2]/sum(accMatrix[,2]))[1]
# Check that normalization worked properly: All probs in a set should add to 1
sum(accPropMatrix[,2]/sum(accPropMatrix[,2]))
which.max(rowSums(accPropMatrix)) # Equipment (row 3)
# Normalized likelihood of equipment accidents, all factories
accMatrix[3,]/sum(accMatrix[3,])
# Same thing, but using the prop matrix
accPropMatrix[3,]/sum(accPropMatrix[3,])
# Check that normalization worked properly: All probs in a set should add to 1
sum(accPropMatrix[3,]/sum(accPropMatrix[3,]))
hist(rbinom(100000,100,.5), main="What Distribution?", xlab = "X")
lapply(0:7, function(i) choose(i, 0:i)) # Pascal's triangle out to 7 coins
accMatrix <- matrix(data=c(0,6,4,6,0,6,6,4,5,4,9,0),
nrow=4,byrow=T,
dimnames=list(c("Vehicle","Spill","Equipment","Injury"),
c("Factory 1", "Factory 2", "Factory 3")))
View(accMatrix)
rowSums(accMatrix) # Demonstrate rowSums()
View(accMatrix)
sum(accMatrix)
accPropMatrix <- accMatrix/sum(accMatrix) # Proportions for each cell
View(accPropMatrix)
)
as.matrix(accPropMatrix[which.max(accPropMatrix)]) # What's the largest proportion?
View(accPropMatrix)
rowSums(accPropMatrix) # Calculate row and col sums from proportions
colSums(accPropMatrix)
View(accPropMatrix)
#############################
# First analyze by column
which.max(colSums(accPropMatrix)) # Factory 2 has the most
View(accPropMatrix)
# Normalized likelihood of all accidents, factory 2
accMatrix[,2]/sum(accMatrix[,2])
# Same thing, but using the prop matrix
accPropMatrix[,2]/sum(accPropMatrix[,2])
# Vehicle accidents are the first element
(accMatrix[,2]/sum(accMatrix[,2]))[1]
# Check that normalization worked properly: All probs in a set should add to 1
sum(accPropMatrix[,2]/sum(accPropMatrix[,2]))
which.max(rowSums(accPropMatrix)) # Equipment (row 3)
# Normalized likelihood of equipment accidents, all factories
accMatrix[3,]/sum(accMatrix[3,])
# Same thing, but using the prop matrix
accPropMatrix[3,]/sum(accPropMatrix[3,])
# Check that normalization worked properly: All probs in a set should add to 1
sum(accPropMatrix[3,]/sum(accPropMatrix[3,]))
table(rbinom(n=100,size=6,prob=0.5))
hist(rbinom(n=100,size=6,prob=0.5))
hist(rbinom(n=100,size=6,prob=0.5))
hist(rbinom(n=100,size=6,prob=0.5))
#png("Figure02_1.png", width = 6, height = 6, units = 'in', res = 300)
hist(rbinom(n=1000,size=6,prob=0.5), main=NULL)
#png("Figure02_2.png", width = 6, height = 6, units = 'in', res = 300)
barplot(table(rbinom(n=1000,size=6,prob=0.5)), main=NULL)
table(rbinom(n=1000,size=6,prob=0.5))/1000
probTable <- table(rbinom(n=1000,size=6,prob=0.5))/1000
probTable
cumsum(probTable)
probTable <- table(rbinom(n=1000,size=6,prob=0.5))/1000
probTable <- table(rbinom(n=1000,size=6,prob=0.5))/1000
#png("Figure02_4.png", width = 6, height = 6, units = 'in', res = 300)
barplot(cumsum(probTable),main=NULL)
probTable <- table(rbinom(n=10000,size=100,prob=0.5))/10000
barplot(probTable)
barplot(cumsum(probTable))
# Sidebar 2.1: Create Your Own Tables with R
#
toast <- matrix(c(2,1,3,4),ncol=2,byrow=TRUE) # Create a two column structure using the matrix() command
View(toast)
colnames(toast) <- c("Down","Up") # Label the columns
rownames(toast) <- c("Jelly","Butter") # Label the rows
toast <- as.table(toast) # Convert from metric to table
toast # Show the table on the console
margin.table(toast)
margin.table(toast,1) # These are the marginal totals for rows
margin.table(toast,2) # These are the marginal totals for columns
toastProbs <- toast/margin.table(toast) # Calculate probabilities
toastProbs # Report probabilities to console
