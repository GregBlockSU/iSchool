t.test(Time ~ Battery, data=battData)
setwd("C:/Users/HQRGRS27/OneDrive/Courses/Syracuse/IST772/WeekByWeekLive/Week 04")
library(readr)
library(readr)
cBattPop <- read_csv("cBattPop.csv")
popMeanDiff <- aggregate(Time ~ Battery, cBattPop, mean)[1,2] -
aggregate(Time ~ Battery, cBattPop, mean)[2,2]
# Or. . .
tapply(X=cBattPop$Time,INDEX=cBattPop$Battery,FUN=mean)[1] -
tapply(X=cBattPop$Time,INDEX=cBattPop$Battery,FUN=mean)[2]
(popMeanDiff <- aggregate(Time ~ Battery, cBattPop, mean)[1,2] -
aggregate(Time ~ Battery, cBattPop, mean)[2,2])
# Or. . .
tapply(X=cBattPop$Time,INDEX=cBattPop$Battery,FUN=mean)[1] -
tapply(X=cBattPop$Time,INDEX=cBattPop$Battery,FUN=mean)[2]
replBattCI <- function()
{
mySamp <- cBattPop[sample(1:100000,size=172, replace=TRUE), ]
nicad <- mySamp$Time[mySamp$Battery==1]
liion <- mySamp$Time[mySamp$Battery==2]
return(t.test(nicad,liion)$conf.int)
}
confIntList <- t(replicate(100,replBattCI()))
plot.ts(confIntList[,1],col="red", ylim=c(-45,-5), xlab="Replications", ylab="CIs Around Mean Diff")
lines(confIntList[,2], col="green")
abline(h=popMeanDiff)
#########################
# Analyses and graphics for introductory slides
sampSize <- 100 # Set sample size
set.seed(11) # Control randomization
groupA <- rnorm(n=sampSize/2) # Generate one sample
groupB <- rnorm(n=sampSize/2) + 0.2 # Generate a second sample that has an effect of 0.2
tout <- t.test(groupA, groupB) # Run a t-test
tout$conf.int[1:2]
# Now let's have a function that reports TRUE if
# both ends of the CI are below zero; remember that the because
# Group B mean should be larger than Group A mean, we are
# looking for a significant negative difference
rerunT <- function() {
groupA <- rnorm(n=sampSize/2)
groupB <- rnorm(n=sampSize/2) + 0.2
tout <- t.test(groupA, groupB)
(tout$conf.int[1] < 0) && (tout$conf.int[2] < 0)
}
# Create a table showing how many times we passed the test
table(replicate(n=10000,expr=rerunT()))
pwr.t.test(n=(sampSize/2), d=0.2, type="two.sample") # What's the power to detect d=0.2?
# Here's a function to create a single mean difference
meanDiffs <- function() {
groupA <- rnorm(n=sampSize/2)
groupB <- rnorm(n=sampSize/2) + 0.2
mean(groupA) - mean(groupB)
}
# Show a histogram of the sampling distribution
hist(replicate(n=10000,expr=meanDiffs()))
# Run 100 t-tests and plot a CI for each one
df <- data.frame(Run = 1:100, U = 0, M = 0, L = 0)
for (i in 1:100) {
groupA <- rnorm(n=sampSize*100/2) # Sample one group
groupB <- rnorm(n=sampSize*100/2) + 0.2 # Sample a second group with d=0.2
tout <- t.test(groupA, groupB) # Run the t-test
df$L[i] <- tout$conf.int[1] # Lower limit of CI
df$U[i] <- tout$conf.int[2] # Upper limit of CI
df$M[i] <- mean(tout$conf.int) # Middle of CI
}
# Create a plot: How many overlap with 0?
# How many overlap with
require("ggplot2")
ggplot(df, aes(x = Run, y = M)) +
geom_point(size = 1) +
geom_errorbar(aes(ymax = U, ymin = L), width=0.15) +
geom_hline(col="red", yintercept = 0) +
geom_hline(col="green", yintercept = -0.2)
setwd("C:/Users/HQRGRS27/OneDrive/Courses/Syracuse/IST772/WeekByWeekLive/Week 04")
battData <- read_csv("bBatterydata.csv")
View(battData)
View(battData)
str(battData)
summary(battData)
hist(battData$Time[battData$Battery==1])
hist(battData$Time[battData$Battery==1])
hist(battData$Time[battData$Battery==2])
boxplot(Time ~ Battery, data=battData, ylim=c(min(battData$Time)-50,max(battData$Time)+50))
tapply(X=battData$Time,INDEX=battData$Battery,FUN=mean)
tapply(X=battData$Time,INDEX=battData$Battery,FUN=sd)
t.test(Time ~ Battery, data=battData)
library(readr)
cBattPop <- read_csv("cBattPop.csv")
(popMeanDiff <- aggregate(Time ~ Battery, cBattPop, mean)[1,2] -
aggregate(Time ~ Battery, cBattPop, mean)[2,2])
# Or. . .
tapply(X=cBattPop$Time,INDEX=cBattPop$Battery,FUN=mean)[1] -
tapply(X=cBattPop$Time,INDEX=cBattPop$Battery,FUN=mean)[2]
replBattCI <- function()
{
mySamp <- cBattPop[sample(1:100000,size=172, replace=TRUE), ]
nicad <- mySamp$Time[mySamp$Battery==1]
liion <- mySamp$Time[mySamp$Battery==2]
return(t.test(nicad,liion)$conf.int)
}
confIntList <- t(replicate(100,replBattCI()))
plot.ts(confIntList[,1],col="red", ylim=c(-45,-5), xlab="Replications", ylab="CIs Around Mean Diff")
lines(confIntList[,2], col="green")
abline(h=popMeanDiff)
library(readr)
cBattPop <- read_csv("cBattPop.csv")
View(cBattPop)
(popMeanDiff <- aggregate(Time ~ Battery, cBattPop, mean)[1,2] -
aggregate(Time ~ Battery, cBattPop, mean)[2,2])
# Or. . .
tapply(X=cBattPop$Time,INDEX=cBattPop$Battery,FUN=mean)[1] -
tapply(X=cBattPop$Time,INDEX=cBattPop$Battery,FUN=mean)[2]
replBattCI <- function()
{
mySamp <- cBattPop[sample(1:100000,size=172, replace=TRUE), ]
nicad <- mySamp$Time[mySamp$Battery==1]
liion <- mySamp$Time[mySamp$Battery==2]
return(t.test(nicad,liion)$conf.int)
}
confIntList <- t(replicate(100,replBattCI()))
View(confIntList)
plot.ts(confIntList[,1],col="red", ylim=c(-45,-5), xlab="Replications", ylab="CIs Around Mean Diff")
lines(confIntList[,2], col="green")
abline(h=popMeanDiff)
View(cBattPop)
# Load the Plant Growth dataset
data(PlantGrowth)
? PlantGrowth
# Print a summary of the Plant Growth data
summary(PlantGrowth)
View(PlantGrowth)
# Break the weights down by group
ctrl.weights = PlantGrowth$weight[PlantGrowth$group == 'ctrl']
trt1.weights = PlantGrowth$weight[PlantGrowth$group == 'trt1']
trt2.weights = PlantGrowth$weight[PlantGrowth$group == 'trt2']
# Plot a histogram of the control group weights
hist(ctrl.weights, main="Histogram of Control Group Plant Weights"
, ylab = "frequency"
, xlab="weight (gms)"
, col="darkgreen"
, border = "white")
# Plot a histogram of the trt1 diet weights
hist(trt1.weights, main="Histogram of TRT1 Group Plant Weights"
, ylab = "frequency"
, xlab="weight (gms)"
, col="darkslateblue"
, border = "white")
# Plot a histogram of the trt2 weights
hist(trt2.weights, main="Histogram of TRT2 Group Plant Weights"
, ylab = "frequency"
, xlab="weight (gms)"
, col="darkgoldenrod"
, border = "white")
# Create a boxplot of weights by group
boxplot(weight ~ group, PlantGrowth
, main="Boxplot Chart of Plant Weights by Group"
, xlab="group"
, ylab="weight (g)"
, col = "palevioletred"
, border = "violetred4")
# Create a boxplot of weights by group
boxplot(weight ~ group, PlantGrowth
, main="Boxplot Chart of Plant Weights by Group"
, xlab="group"
, ylab="weight (g)"
, col = "palevioletred"
, border = "violetred4")
# Generate a t test on the means between the control group and diet trt1
t.test(ctrl.weights, trt1.weights)
# Generate a t test on the means between the control group and diet trt2
t.test(ctrl.weights, trt2.weights)
library(readr)
battData <- read_csv("bBatterydata.csv")
str(battData)
summary(battData)
hist(battData$Time[battData$Battery==1])
hist(battData$Time[battData$Battery==2])
aggregate(Time ~ Battery, cBattPop, mean)[1,2]
aggregate(Time ~ Battery, cBattPop, mean)[2,2]
length(battData[battData$Battery==1])
length(battData[Battery==1])
nrows(battData[battData$Battery==1])
nrow(battData[battData$Battery==1])
battData[battData$Battery==1]
View(battData)
battData[battData$Battery==1]
battData[,battData$Battery==1]
battData[battData$Battery==1,]
length(battData[battData$Battery==1,])
nrow(battData[battData$Battery==1,])
nrow(battData[battData$Battery==2,])
nicad$mean <- aggregate(Time ~ Battery, cBattPop, mean)[1,2]
nicad.mean <- aggregate(Time ~ Battery, cBattPop, mean)[1,2]
liion.mean <- aggregate(Time ~ Battery, cBattPop, mean)[2,2]
nicad.n <- nrow(battData[battData$Battery==1,])
liion.n <- nrow(battData[battData$Battery==2,])
nicad.sd <- aggregate(Time ~ Battery, cBattPop, sd)[1,2]
liion.sd <- aggregate(Time ~ Battery, cBattPop, sd)[2,2]
standard_error <- function(sd1, n1, sd2, n2)
{
sqrt((sd1/n1) + (sd2/n2))
}
standard_error(nicad,sd, nicad.n, liion.sd, liion.n)
return sqrt((sd1/n1) + (sd2/n2))
standard_error <- function(sd1, n1, sd2, n2)
{
return sqrt((sd1/n1) + (sd2/n2))
}
standard_error <- function(sd1, n1, sd2, n2)
{
return (sqrt((sd1/n1) + (sd2/n2)))
}
standard_error(nicad,sd, nicad.n, liion.sd, liion.n)
standard_error(nicad.sd, nicad.n, liion.sd, liion.n)
standard_error <- function(sd1, n1, sd2, n2)
{
return (sqrt((sd1^2/n1) + (sd2^2/n2)))
}
standard_error(nicad.sd, nicad.n, liion.sd, liion.n)
std_error <- tandard_error(nicad.sd, nicad.n, liion.sd, liion.n)
std_error <- tandard_error(nicad.sd, nicad.n, liion.sd, liion.n)
mean_diff <- nicad.mean - liion.mean
std_error <- standard_error(nicad.sd, nicad.n, liion.sd, liion.n)
mean_diff <- nicad.mean - liion.mean
Z_VALUE_95PCT <- 1.960
t <- function(mean1, mean2, n1, n2)
{
return ( (mean1 - mean2) / sqrt((1/n1 + 1/n2)))
}
observed_t <- t(nicad.mean, liion.mean, nicad.n, liion.n)
t_critical_value <- Z_VALUE_95PCT * observed_t
ci.low <- mean_diff - t_critical_value
ci.hi <- mean_diff + t_critical_value
t.test(Time ~ Battery, data=battData)
pooled_variance <- function(sd1, n1, sd2, n2)
{
return((sd1^2 + sd2^2) / ((n1 -1) + (n2 - 1)))
}
pooled_var <- pooled_variance(nicad.sd, nicad.n, liion.sd, liion.n)
library(readr)
cBattPop <- read_csv("cBattPop.csv")
(popMeanDiff <- aggregate(Time ~ Battery, cBattPop, mean)[1,2] -
aggregate(Time ~ Battery, cBattPop, mean)[2,2])
# Or. . .
tapply(X=cBattPop$Time,INDEX=cBattPop$Battery,FUN=mean)[1] -
tapply(X=cBattPop$Time,INDEX=cBattPop$Battery,FUN=mean)[2]
tapply(X=cBattPop$Time,INDEX=cBattPop$Battery,FUN=mean)[1]
tapply(X=cBattPop$Time,INDEX=cBattPop$Battery,FUN=mean)[2]
nicad.mean <- tapply(X=cBattPop$Time,INDEX=cBattPop$Battery,FUN=mean)[1]
liion.mean <- tapply(X=cBattPop$Time,INDEX=cBattPop$Battery,FUN=mean)[2]
nicad.sd <- tapply(X=cBattPop$Time,INDEX=cBattPop$Battery,FUN=sd)[1]
liion.sd <- tapply(X=cBattPop$Time,INDEX=cBattPop$Battery,FUN=sd)[2]
liion.sd <- tapply(X=cBattPop$Time,INDEX=cBattPop$Battery,FUN=sd)[2]
nicad.mean <- mean(battData[battData$Battery==1,])
nicad.obs <- battData[battData$Battery==1,]
nicad.mean <- mean(nicad.obs$Time)
liion.obs <- battData[battData$Battery==2,]
liion.mean <- mean(liion.obs$Time)
nicad.var <- var(nicad.obs$Time)
nicad.sd <- sd(nicad.obs$Time)
liion.obs <- battData[battData$Battery==2,]
liion.mean <- mean(liion.obs$Time)
liion.var <- var(liion.obs$Time)
liion.sd <- sd(liion.obs$Time)
pooled_variance <- function(sd1, n1, sd2, n2)
{
return((sd1^2 + sd2^2) / ((n1 -1) + (n2 - 1)))
}
std_error <- standard_error(nicad.sd, nicad.n, liion.sd, liion.n)
observed_t <- t(nicad.mean, liion.mean, nicad.n, liion.n)
t <- function(mean1, mean2, std_error)
{
return ( (mean1 - mean2) / std_error)
}
observed_t <- t(nicad.mean, liion.mean, std_error)
mean_diff <- nicad.mean - liion.mean
t_critical_value <- Z_VALUE_95PCT * observed_t
t_critical_value <- Z_VALUE_95PCT * observed_t
ci.low <- mean_diff - t_critical_value
ci.hi <- mean_diff + t_critical_value
pooled_variance <- function(sd1, df1, sd2, df2)
{
return(((sd1^2 * df1) + (sd2^2 * df2)) / (df1 + df2))
}
pooled_var <- pooled_variance(nicad.sd, nicad.n - 1, liion.sd, liion.n - 1)
t_critical_value <- Z_VALUE_95PCT * std_error
ci.low <- mean_diff - t_critical_value
ci.hi <- mean_diff + t_critical_value
library(readr)
battData <- read_csv("bBatterydata.csv")
hist(battData$Time[battData$Battery==1])
hist(battData$Time[battData$Battery==2])
Z_VALUE_95PCT <- 1.960
nicad.obs <- battData[battData$Battery==1,]
nicad.mean <- mean(nicad.obs$Time)
nicad.var <- var(nicad.obs$Time)
nicad.sd <- sd(nicad.obs$Time)
nicad
print(nicad)
paste0("Nicad mean", nicad,mean)
nicad.obs <- battData[battData$Battery==1,]
nicad.mean <- mean(nicad.obs$Time)
nicad.var <- var(nicad.obs$Time)
nicad.sd <- sd(nicad.obs$Time)
paste0("Nicad mean", nicad,mean)
paste0("Nicad mean", nicad.mean)
paste0("Nicad mean: ", nicad.mean, "SD: ", nicad.sd)
liion.obs <- battData[battData$Battery==2,]
liion.mean <- mean(liion.obs$Time)
liion.var <- var(liion.obs$Time)
liion.sd <- sd(liion.obs$Time)
paste0("Lithium Ion mean: ", liion.mean, "SD: ", liion.sd)
standard_error <- function(sd1, n1, sd2, n2)
{
return (sqrt((sd1^2/n1) + (sd2^2/n2)))
}
t <- function(mean1, mean2, std_error)
{
return ( (mean1 - mean2) / std_error)
}
pooled_variance <- function(sd1, df1, sd2, df2)
{
return(((sd1^2 * df1) + (sd2^2 * df2)) / (df1 + df2))
}
std_error <- standard_error(nicad.sd, nicad.n, liion.sd, liion.n)
observed_t <- t(nicad.mean, liion.mean, std_error)
mean_diff <- nicad.mean - liion.mean
pooled_var <- pooled_variance(nicad.sd, nicad.n - 1, liion.sd, liion.n - 1)
t_critical_value <- Z_VALUE_95PCT * std_error
ci.low <- mean_diff - t_critical_value
ci.hi <- mean_diff + t_critical_value
source('C:/Users/HQRGRS27/OneDrive/Courses/Syracuse/IST772/WeekByWeekLive/Week 04/wk4breakout1.R')
source('C:/Users/HQRGRS27/OneDrive/Courses/Syracuse/IST772/WeekByWeekLive/Week 04/wk4breakout1.R')
source('C:/Users/HQRGRS27/OneDrive/Courses/Syracuse/IST772/WeekByWeekLive/Week 04/wk4breakout1.R')
library(readr)
battData <- read_csv("bBatterydata.csv")
Z_VALUE_95PCT <- 1.960
nicad.obs <- battData[battData$Battery==1,]
nicad.mean <- mean(nicad.obs$Time)
nicad.var <- var(nicad.obs$Time)
nicad.sd <- sd(nicad.obs$Time)
paste0("Nicad mean: ", nicad.mean, "SD: ", nicad.sd)
liion.obs <- battData[battData$Battery==2,]
liion.mean <- mean(liion.obs$Time)
liion.var <- var(liion.obs$Time)
liion.sd <- sd(liion.obs$Time)
paste0("Lithium Ion mean: ", liion.mean, "SD: ", liion.sd)
standard_error <- function(sd1, n1, sd2, n2)
{
return (sqrt((sd1^2/n1) + (sd2^2/n2)))
}
t <- function(mean1, mean2, std_error)
{
return ( (mean1 - mean2) / std_error)
}
pooled_variance <- function(sd1, df1, sd2, df2)
{
return(((sd1^2 * df1) + (sd2^2 * df2)) / (df1 + df2))
}
std_error <- standard_error(nicad.sd, nicad.n, liion.sd, liion.n)
observed_t <- t(nicad.mean, liion.mean, std_error)
mean_diff <- nicad.mean - liion.mean
pooled_var <- pooled_variance(nicad.sd, nicad.n - 1, liion.sd, liion.n - 1)
t_critical_value <- Z_VALUE_95PCT * std_error
ci.low <- mean_diff - t_critical_value
ci.hi <- mean_diff + t_critical_value
paste0("Mean difference: ", mean_diff, "SE:", std_error, "Pooled var: ", pooled_var)
paste0("Confidence interval: ", ci.low, ci.hi)
paste0("Confidence interval =  ", mean_diff, " +/- ", t_critical_value)
paste0("Confidence interval: ", ci.low, ci.hi)
t.test(Time ~ Battery, data=battData)
paste0("Confidence interval =  ", mean_diff, " +/- ", t_critical_value)
library(wordcloud)
library(tm)
library(slam)
library(quanteda)
library(SnowballC)
library(arules)
library(proxy)
library(cluster)
library(stringi)
library(Matrix)
library(tidytext)
library(plyr)
library(ggplot2)
library(factoextra)
library(mclust)
library(dplyr)
library(rdwplus)
library(corpus)
# setwd("C:/Users/HQRGRS27/OneDrive/Courses/Syracuse/IST707/Homework/04/")
FederalistPapers <- read.csv("fedPapers85.csv", row.names = 2, na.strings = c(""))
setwd("C:/Users/HQRGRS27/OneDrive/Courses/Syracuse/IST707/Homework/04")
# setwd("C:/Users/HQRGRS27/OneDrive/Courses/Syracuse/IST707/Homework/04/")
FederalistPapers <- read.csv("fedPapers85.csv", row.names = 2, na.strings = c(""))
# Create backup of FederalistPapers in case it's needed
FederalistPapers_Orig <- FederalistPapers
# Check for NAs and missing values
sum(is.na(FederalistPapers))
FederalistPapers <- FederalistPapers[,-1]
# first, remove the file and author names for a word cloud gallery
FedPapers_wc <- as.matrix(as.dfm(FederalistPapers)) #FederalistPapers[,3:72]
hamPapers = FedPapers_wc[12:62,]
nrow(FedPapers_wc[11,])
# first, remove the file and author names for a word cloud gallery
FedPapers_wc <- as.matrix(as.dfm(FederalistPapers)) #FederalistPapers[,3:72]
hamPapers = FedPapers_wc[12:62,]
nrow(FedPapers_wc[11,])
x <- FedPapers_wc[11,]
type(x)
class(x)
x <- FedPapers_wc[1:11,]
class(x)
nrow(x)
View(FedPapers_wc)
x <- FedPapers_wc[1:11]
class(x)
length(x)
x <- FedPapers_wc[11]
length(x)
x <- FedPapers_wc[11,]
length(x)
x <- FedPapers_wc[1:11,]
length(x)
x <- FedPapers_wc[1:11]
length(x)
install.packages("RWeka")
library(RWeka)
setwd("C:/Users/HQRGRS27/source/git/SU/iSchool/ist707/Homework/05")
trainset <- read.csv("titanic-train.csv")
library(RWeka)
trainset <- read.csv("titanic-train.csv")
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre1.8.0_291\\jre”)
library(RWeka)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre1.8.0_291\\jre”)
library(RWeka)
trainset <- read.csv("titanic-train.csv")
testset <- read.csv("titanic-test.csv")
NN <- make_Weka_filter("weka/filters/unsupervised/attribute/NumericToNominal")
trainset <- NN(data=trainset, control= Weka_control(R="1-3"), na.action = NULL)
testset <- NN(data=testset, control= Weka_control(R="1,3"), na.action = NULL)
MS <- make_Weka_filter("weka/filters/unsupervised/attribute/ReplaceMissingValues")
trainset <-MS(data=trainset, na.action = NULL)
testset <-MS(data=testset, na.action = NULL)
model 1: no feature engineering
m=J48(Survived~., data = trainset, control=Weka_control(U=FALSE, M=2, C=0.5))
e <- evaluate_Weka_classifier(m, numFolds = 10, seed = 1, class = TRUE)
pred=predict (m, newdata = testset, type = c("class"))
myids=c("PassengerId")
id_col=testset[myids]
newpred=cbind(id_col, pred)
colnames(newpred)=c("Passengerid", "Survived")
write.csv(newpred, file="/Users/byu/Desktop/Data/titanic-J48-pred-05-17-2017.csv", row.names=FALSE)
#80.8%
#Kaggle .78469
model 2: some feature selection
myVars=c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Survived")
newtrain=trainset[myVars]
newtest=testset[myVars]
m=J48(Survived~., data = newtrain)
m=J48(Survived~., data = newtrain, control=Weka_control(U=FALSE, M=2, C=0.5))
e=evaluate_Weka_classifier(m, seed=1, numFolds=10)
pred=predict (m, newdata = newtest, type = c("class"))
myids=c("PassengerId")
id_col=testset[myids]
newpred=cbind(id_col, pred)
colnames(newpred)=c("Passengerid", "Survived")
View(newpred)
write.csv(newpred, file="/Users/byu/Desktop/Data/titanic-J48-pred-05-17-2017-fs.csv", row.names=FALSE)
#81.7%
#Kaggle .78469
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre1.8.0_291\\jre”);
library(RWeka)
trainset <- read.csv("titanic-train.csv")
testset <- read.csv("titanic-test.csv")
NN <- make_Weka_filter("weka/filters/unsupervised/attribute/NumericToNominal")
trainset <- NN(data=trainset, control= Weka_control(R="1-3"), na.action = NULL)
testset <- NN(data=testset, control= Weka_control(R="1,3"), na.action = NULL)
MS <- make_Weka_filter("weka/filters/unsupervised/attribute/ReplaceMissingValues")
trainset <-MS(data=trainset, na.action = NULL)
testset <-MS(data=testset, na.action = NULL)
model 1: no feature engineering
m=J48(Survived~., data = trainset, control=Weka_control(U=FALSE, M=2, C=0.5))
e <- evaluate_Weka_classifier(m, numFolds = 10, seed = 1, class = TRUE)
pred=predict (m, newdata = testset, type = c("class"))
myids=c("PassengerId")
id_col=testset[myids]
newpred=cbind(id_col, pred)
colnames(newpred)=c("Passengerid", "Survived")
write.csv(newpred, file="/Users/byu/Desktop/Data/titanic-J48-pred-05-17-2017.csv", row.names=FALSE)
#80.8%
#Kaggle .78469
model 2: some feature selection
myVars=c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Survived")
newtrain=trainset[myVars]
newtest=testset[myVars]
m=J48(Survived~., data = newtrain)
m=J48(Survived~., data = newtrain, control=Weka_control(U=FALSE, M=2, C=0.5))
e=evaluate_Weka_classifier(m, seed=1, numFolds=10)
pred=predict (m, newdata = newtest, type = c("class"))
myids=c("PassengerId")
id_col=testset[myids]
newpred=cbind(id_col, pred)
colnames(newpred)=c("Passengerid", "Survived")
View(newpred)
write.csv(newpred, file="/Users/byu/Desktop/Data/titanic-J48-pred-05-17-2017-fs.csv", row.names=FALSE)
#81.7%
#Kaggle .78469
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre1.8.0_291\\jre”)
;
;
)
